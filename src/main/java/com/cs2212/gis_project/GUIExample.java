/*
* This is a very simple example of a Java GUI for the CS2212 project.
*
* It is only meant to demonstrate the basics of the GUI. It is missing most 
* features and is no way complete and should not be taken as an example of a
* complete project.
*
* This is not to be taken as a reference implementation, prototype, or project 
* specification. It is only a basic GUI example. It does not include all 
* components your GUI or project will need by any stretch. Your project MUST
* follow the project specification posted on OWL as well as the details for
* each project component (also posted on OWL).
*
* The layout of the GUI is also only a simple example, yours will have to 
* support more features and aim to be more intuitive.
*
* Your comments and documentation in your code should be based on JavaDoc (the 
* comments in this code do not).
*
* Most of the GUI code was generated by NetBeans GUI designer. It is recommended
* that you use a tool like this to make working with the GUI easier.
*
* There is a lot of hardcoding used in this example. Remember that you need to
* read and store the POIs in a file or database (file being the easier option).
*
* The maps are loaded as PNG files. If you want to use this method you will have
* to covert the map PDFs to images (you can also manually remove the
* accessibility layer when doing this). It is possible to work with the PDFs
* directly in Java but it is much more complicated and will require an external
* library.
*
* Keep in mind the POIs in this example are just random points, the same for
* each map, and only one POI per layer. Your POIs will have to follow the
* project specification. This means multiple POIs per layer, POIs being based
* on the map, POIs having more meta data associated with them, and so on.
*
* You are free to use this code in your project or you can build your GUI from 
* scratch.
*
* @author Daniel Servos
*/

package com.cs2212.gis_project;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


public class GUIExample extends javax.swing.JFrame {

    private BufferedImage mapImage;
    
    //Hardcoded POI locations, you will need to read them from a file (or DB) and
    //have more meta data for each point. They should also be different for each map
    //and have a layer associated with them.
    private int[][] poiLocations = {{250,250}, {100,500}, {250, 405}, {75,345}};
    
    //Hardcoded layer names, yours can be hardcoded too, but the names need to be descriptive.
    //You should have more than one POI per layer.
    private String[] layerNames = { "Layer 1", "Layer 2", "Layer 3", "Layer 4"};
    
    //Names of the maps, rather then simply listing all maps in one big list you may want
    //to break it down by building to make it easier to find the map you want.
    //Yours can be hardcoded or read from a file.
    private String[] mapNames = { "MC Floor 0", "MC Floor 1", "MC Floor 2", "MC Floor 3", "MC Floor 4" };
    
    //Location of map files. In this example we are using png files, pdfs are more 
    //flexible but harder to work with in java (would need an outside library).
    //You can hardcode your filenames if you wish.
    //Note that these have to be in the same order as the mapNames to match up.
    //Important! These file paths must be on your class path.
    private String[] mapFiles = { "maps/mc0.png", "maps/mc1.png", "maps/mc2.png", "maps/mc3.png", "maps/mc4.png"};
    
    //JLabel we are using for the poi marker. As you will have many more POIs per
    //layer you are going to have to make a JLabel for each POI if you use this
    //method.
    private JLabel poi = new JLabel();
    
    
    
    /**
     * Creates new form NewJFrame
     */
    public GUIExample() {
        //initialize components (this method was generated by NetBeans)
        initComponents();
        
        //all code in this method past this point is custom code (not generated)
        //to set up the components a bit more.
        
        //Adds the map names and layer names to the JList components
        mapList.setListData(mapNames);
        poiLayerList.setListData(layerNames);
        
        //Try to load the poi.png image used for the points of interset
        try {
           //if you get an error here, it is likely due to poi.png not being on the class path
           //or not in the correct directory
           poi.setIcon(new ImageIcon(ImageIO.read(GUIExample.class.getClassLoader().getResource("imgs/poi.png"))));
        } catch (IOException ex) {
            // handle exception...
            // you will have to come up with a better way to deal with errors
            System.out.println("Error reading poi.png");
            System.out.println(ex.getMessage());
            System.out.println("Your class path is: " + System.getProperty("java.class.path"));
        }
        
        //set the location of the poi label
        //arguments are x, y, width, height (width and height should match the size
        //of the image).
        poi.setBounds(0,0,75,75);
        
        //A Layered pane allows components to overlap, the number here sets their
        //depth (higher components, with a larger number, are on top).
        layeredMapPane.add(poi, 10);   //poi marker
        layeredMapPane.setLayer(map, 0); //will be the map once loaded
        
        //Keep the poi label hidden until shown
        poi.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     * All code in initCompoents was generated by NetBeans. If you are using
     * the NetBeans GUI editor don't change this manually.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapScrollPane = new javax.swing.JScrollPane();
        layeredMapPane = new javax.swing.JLayeredPane();
        map = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        mapControlLabel = new javax.swing.JLabel();
        mapListScrollPane = new javax.swing.JScrollPane();
        mapList = new javax.swing.JList<>();
        mapShowButton = new javax.swing.JButton();
        poiLayerControlLabel = new javax.swing.JLabel();
        poiLayerScrollPane = new javax.swing.JScrollPane();
        poiLayerList = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitFileMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutHelpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        mapScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        map.setText("No Map Loaded Yet!");
        map.setToolTipText("");

        layeredMapPane.setLayer(map, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredMapPaneLayout = new javax.swing.GroupLayout(layeredMapPane);
        layeredMapPane.setLayout(layeredMapPaneLayout);
        layeredMapPaneLayout.setHorizontalGroup(
            layeredMapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredMapPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(map)
                .addContainerGap(807, Short.MAX_VALUE))
        );
        layeredMapPaneLayout.setVerticalGroup(
            layeredMapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredMapPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(map)
                .addContainerGap(943, Short.MAX_VALUE))
        );

        mapScrollPane.setViewportView(layeredMapPane);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        mapControlLabel.setText("Maps");

        mapListScrollPane.setViewportView(mapList);

        mapShowButton.setText("Show");
        mapShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapShowButtonActionPerformed(evt);
            }
        });

        poiLayerControlLabel.setText("POI Layers");

        poiLayerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                poiLayerListValueChanged(evt);
            }
        });
        poiLayerScrollPane.setViewportView(poiLayerList);

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(controlPanelLayout.createSequentialGroup()
                                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchButton))
                                    .addComponent(mapControlLabel)))
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(mapShowButton))
                            .addComponent(poiLayerControlLabel)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(poiLayerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mapListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(mapControlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapShowButton)
                .addGap(62, 62, 62)
                .addComponent(poiLayerControlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(poiLayerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(188, 188, 188))
        );

        fileMenu.setText("File");

        exitFileMenuItem.setText("Exit");
        exitFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitFileMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setToolTipText("");

        aboutHelpMenuItem.setText("About");
        aboutHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutHelpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutHelpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapScrollPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //This method is called when the Show button is clicked
    private void mapShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapShowButtonActionPerformed
       URL mapFile;
       int index = mapList.getSelectedIndex(); //find out what item in the map list is selected
       
       if(index < mapFiles.length) {
           //This trys to find the location of the map file.
           //if mapFile is null, it could not find the file (not on class path?)
           mapFile =  GUIExample.class.getClassLoader().getResource(mapFiles[index]);
          
            //try to load the map image and set it on the map icon
            try {
               mapImage = ImageIO.read(mapFile);
               map.setIcon(new ImageIcon(mapImage));
               map.setText("");
            } catch (IOException ex) {
                 // handle exception...
                 // you will have to come up with a better way to deal with errors
                 System.out.println("Error reading " + mapFiles[index]);
                 System.out.println(ex.getMessage());
                 System.out.println("Your class path is: " + System.getProperty("java.class.path"));
                 if(mapFile != null) 
                    System.out.println("URL: " + mapFile.toString());
            }
            
            
            //You will have to decided what happens when a map is changed and
            //there are still POIs showing. You don't want to show them on 
            //the wrong map. Here we just hide them and unselect all layers.
            //This might not be the best option (e.g. users may want to keep
            //the layers selected between maps).
            poi.setVisible(false);
            poiLayerList.clearSelection();
       }
    }//GEN-LAST:event_mapShowButtonActionPerformed

    //This method is run when the search button is pressed
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //Search is not implmented yet so just show a pop up.
        JOptionPane.showMessageDialog(this, "The search is not implmented yet but you input: " + searchTextField.getText(), "Search", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_searchButtonActionPerformed

    //This method is run when the exit menu item (from the file menu) is selected
    private void exitFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileMenuItemActionPerformed
        //Ask the user if they are sure they want to exit
        int i = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit?", JOptionPane.YES_NO_OPTION);
        if(i == 0) System.exit(0);
    }//GEN-LAST:event_exitFileMenuItemActionPerformed

    //This method is run when the about menu item (from the help menu) is selected
    private void aboutHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutHelpMenuItemActionPerformed
        //Show a simple popup
        JOptionPane.showMessageDialog(this, "This is just a simple GUI demo.\nMost features are missing.\nThe GUI was created with NetBean's GUI editor!", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutHelpMenuItemActionPerformed

    //This method is run when any change is made to the POI layer list in the GUI
    private void poiLayerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_poiLayerListValueChanged
        int index = poiLayerList.getSelectedIndex(); //find out what item was selected
        
        if(map.getIcon() != null && index >= 0) { //only show the POI if a map is being displayed and a POI layer was selected
            //make the poi label visible
            poi.setVisible(true);
            //update the location of the poi label
            poi.setBounds(poiLocations[index][0],poiLocations[index][1],75,75);  
        } else {
            //Clear the selection in the POI layer list in the GUI
            poiLayerList.clearSelection();
            //Hide the poi label
            poi.setVisible(false);
        }
    }//GEN-LAST:event_poiLayerListValueChanged

    //The java main method (where the code starts)
    //All of this method was generated by NetBeans
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIExample.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIExample.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIExample.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIExample.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIExample().setVisible(true);
            }
        });
    }

    //These variables were generated by NetBeans
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutHelpMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JMenuItem exitFileMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLayeredPane layeredMapPane;
    private javax.swing.JLabel map;
    private javax.swing.JLabel mapControlLabel;
    private javax.swing.JList<String> mapList;
    private javax.swing.JScrollPane mapListScrollPane;
    private javax.swing.JScrollPane mapScrollPane;
    private javax.swing.JButton mapShowButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel poiLayerControlLabel;
    private javax.swing.JList<String> poiLayerList;
    private javax.swing.JScrollPane poiLayerScrollPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
